{"version":3,"sources":["components/contactList/contactList.module.css","redux/app-actions.js","redux/operations.js","redux/contacts-selectors.js","components/contactForm/ContactForm.js","components/contactList/ContactList.js","components/filter/Filter.js","App.js","redux/ContactsReducer.js","redux/FilterReducer.js","redux/RootReducer.js","redux/store.js","index.js","components/contactForm/contactForm.module.css"],"names":["module","exports","addContactRequest","createAction","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","fetchContactRequest","fetchContactSuccess","fetchContactError","handleChange","axios","defaults","baseURL","getContactsSelector","state","contacts","getFilterSelector","filter","getfilteredContactsSelector","createSelector","filterInput","toLowerCase","trim","contact","name","includes","ContactForm","number","event","target","value","setState","handleSubmit","preventDefault","props","find","alert","addContactProp","className","styles","formBox","onSubmit","this","label","type","pattern","title","required","onChange","formInput","submitButton","Component","connect","dispatch","post","then","response","data","catch","error","addContact","ContactList","fetchContacts","filteredContactsProp","map","li","button","onClick","deleteContactProp","id","get","contactId","delete","App","ContactsReducer","createReducer","_","payload","FilterReducer","rootReducer","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de001c96.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"contactList_button__12lF0\",\"li\":\"contactList_li__13gBv\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContactRequest = createAction(\"contacts/addContactRequest\");\r\nconst addContactSuccess = createAction(\"contacts/addContactSuccess\");\r\nconst addContactError = createAction(\"contacts/addContactError\");\r\n\r\nconst deleteContactRequest = createAction(\"contacts/deleteContactRequest\");\r\nconst deleteContactSuccess = createAction(\"contacts/deleteContactSuccess\");\r\nconst deleteContactError = createAction(\"contacts/deleteContactError\");\r\n\r\nconst fetchContactRequest = createAction(\"contacts/fetchContactRequest\");\r\nconst fetchContactSuccess = createAction(\"contacts/fetchContactSuccess\");\r\nconst fetchContactError = createAction(\"contacts/fetchContactError\");\r\n\r\nconst handleChange = createAction(\"app/handleChange\");\r\n\r\nexport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  handleChange,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n};\r\n","import axios from \"axios\";\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n} from \"./app-actions\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:3000\";\r\n\r\nconst fetchContacts = () => (dispatch) => {\r\n  dispatch(fetchContactRequest());\r\n\r\n  axios\r\n    .get(\"/contacts\")\r\n    .then((response) => dispatch(fetchContactSuccess(response.data)))\r\n    .catch((error) => dispatch(fetchContactError(error)));\r\n};\r\n\r\nconst addContact = (name, number) => (dispatch) => {\r\n  const contact = { name, number };\r\n\r\n  dispatch(addContactRequest());\r\n\r\n  axios\r\n    .post(\"/contacts\", contact)\r\n    .then((response) => dispatch(addContactSuccess(response.data)))\r\n    .catch((error) => dispatch(addContactError(error)));\r\n};\r\n\r\nconst deleteContact = (contactId) => (dispatch) => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch((error) => dispatch(deleteContactError(error)));\r\n};\r\n\r\nexport { addContact, deleteContact, fetchContacts };\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nconst getContactsSelector = (state) => state.contacts;\r\n\r\nconst getFilterSelector = (state) => state.filter;\r\n\r\nconst getfilteredContactsSelector = createSelector(\r\n  [getFilterSelector, getContactsSelector],\r\n  (filter, contacts) => {\r\n    const filterInput = filter.toLowerCase().trim();\r\n\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(filterInput)\r\n    );\r\n  }\r\n);\r\n\r\nexport { getContactsSelector, getFilterSelector, getfilteredContactsSelector };\r\n","import React, { Component } from \"react\";\nimport styles from \"./contactForm.module.css\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { addContact } from \"../../redux/operations\";\nimport { getContactsSelector } from \"../../redux/contacts-selectors\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (\n      this.props.contacts.find((contact) => contact.name === this.state.name)\n    ) {\n      alert(`${this.state.name} is already in contacts`);\n      return;\n    }\n\n    this.props.addContactProp(this.state.name, this.state.number);\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  render() {\n    return (\n      <div className={styles.formBox}>\n        <form onSubmit={this.handleSubmit}>\n          <label className={styles.label}>\n            Name <br />\n            <input\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n              value={this.state.name}\n              onChange={this.handleChange}\n              className={styles.formInput}\n            />\n          </label>{\" \"}\n          <label className={styles.label}>\n            Number <br />\n            <input\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n              value={this.state.number}\n              onChange={this.handleChange}\n            />\n          </label>\n          <button type=\"submit\" className={styles.submitButton}>\n            Add contact\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: getContactsSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  addContactProp: (name, number) => dispatch(addContact(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n\nContactForm.propTypes = {\n  addContactProp: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n","import styles from \"./contactList.module.css\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { deleteContact, fetchContacts } from \"../../redux/operations\";\nimport React, { Component } from \"react\";\nimport { getfilteredContactsSelector } from \"../../redux/contacts-selectors\";\n\nclass ContactList extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <ul>\n        {this.props.filteredContactsProp.map((contact) => (\n          <li key={contact.id} className={styles.li}>\n            {contact.name}: {contact.number}\n            <button\n              className={styles.button}\n              type=\"button\"\n              onClick={() => this.props.deleteContactProp(contact.id)}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  filteredContactsProp: getfilteredContactsSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchContacts: () => dispatch(fetchContacts()),\n  deleteContactProp: (id) => dispatch(deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\nContactList.propTypes = {\n  filteredContactsProp: PropTypes.array.isRequired,\n  deleteContactProp: PropTypes.func.isRequired,\n};\n","import PropTypes from \"prop-types\";\n\nimport { connect } from \"react-redux\";\nimport { handleChange } from \"../../redux/app-actions\";\nimport { getFilterSelector } from \"../../redux/contacts-selectors\";\n\nconst Filter = ({ filter, handleChange }) => {\n  return (\n    <label>\n      Find contacts by name <br />\n      <input type=\"text\" name=\"filter\" value={filter} onChange={handleChange} />\n    </label>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  filter: getFilterSelector(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleChange: (event) => dispatch(handleChange(event.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n","import \"./App.css\";\nimport ContactForm from \"./components/contactForm/ContactForm\";\nimport ContactList from \"./components/contactList/ContactList\";\nimport Filter from \"./components/filter/Filter\";\n\nconst App =() => {\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm/>\n\n        <h2>Contacts</h2>\n        <Filter/>\n\n        <ContactList\n        />\n      </div>\n    );\n  }\n\n\nexport default App;","import {\r\n  addContactSuccess,\r\n  deleteContactSuccess,\r\n  fetchContactSuccess,\r\n} from \"./app-actions\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n\r\nconst ContactsReducer = createReducer([], {\r\n  [fetchContactSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter((contact) => contact.id !== payload),\r\n});\r\n\r\nexport { ContactsReducer };\r\n","import {handleChange} from './app-actions';\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n\r\nconst FilterReducer = createReducer('', {\r\n    [handleChange]: (_, {payload})=> payload,\r\n  })\r\n\r\n\r\n  export {FilterReducer};","import { ContactsReducer } from \"./ContactsReducer\";\r\nimport { FilterReducer } from \"./FilterReducer\";\r\nimport { combineReducers} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst rootReducer = combineReducers ({\r\n    contacts:ContactsReducer,\r\n    filter: FilterReducer,\r\n  })\r\n\r\n  export {rootReducer};","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport { rootReducer } from \"./RootReducer\";\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n// import { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formBox\":\"contactForm_formBox__3WzCU\",\"submitButton\":\"contactForm_submitButton__3LnFm\",\"label\":\"contactForm_label__2lIAy\"};"],"sourceRoot":""}